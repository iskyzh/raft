# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import raft_pb2 as raft__pb2


class RaftStub(object):
  """One-way RPC

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RequestVote = channel.unary_unary(
        '/Raft/RequestVote',
        request_serializer=raft__pb2.RequestVoteRequest.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )
    self.OnRequestVote = channel.unary_unary(
        '/Raft/OnRequestVote',
        request_serializer=raft__pb2.RequestVoteReply.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )
    self.AppendEntries = channel.unary_unary(
        '/Raft/AppendEntries',
        request_serializer=raft__pb2.AppendEntriesRequest.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )
    self.OnAppendEntries = channel.unary_unary(
        '/Raft/OnAppendEntries',
        request_serializer=raft__pb2.AppendEntriesReply.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )


class RaftServicer(object):
  """One-way RPC

  """

  def RequestVote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OnRequestVote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AppendEntries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OnAppendEntries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RequestVote': grpc.unary_unary_rpc_method_handler(
          servicer.RequestVote,
          request_deserializer=raft__pb2.RequestVoteRequest.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
      'OnRequestVote': grpc.unary_unary_rpc_method_handler(
          servicer.OnRequestVote,
          request_deserializer=raft__pb2.RequestVoteReply.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
      'AppendEntries': grpc.unary_unary_rpc_method_handler(
          servicer.AppendEntries,
          request_deserializer=raft__pb2.AppendEntriesRequest.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
      'OnAppendEntries': grpc.unary_unary_rpc_method_handler(
          servicer.OnAppendEntries,
          request_deserializer=raft__pb2.AppendEntriesReply.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Raft', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ControlStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AppendLog = channel.unary_unary(
        '/Control/AppendLog',
        request_serializer=raft__pb2.AppendLogRequest.SerializeToString,
        response_deserializer=raft__pb2.AppendLogReply.FromString,
        )
    self.RequestLog = channel.unary_unary(
        '/Control/RequestLog',
        request_serializer=raft__pb2.RequestLogRequest.SerializeToString,
        response_deserializer=raft__pb2.RequestLogReply.FromString,
        )
    self.Shutdown = channel.unary_unary(
        '/Control/Shutdown',
        request_serializer=raft__pb2.Void.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )
    self.Alive = channel.unary_unary(
        '/Control/Alive',
        request_serializer=raft__pb2.Void.SerializeToString,
        response_deserializer=raft__pb2.Void.FromString,
        )


class ControlServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def AppendLog(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestLog(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Shutdown(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Alive(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AppendLog': grpc.unary_unary_rpc_method_handler(
          servicer.AppendLog,
          request_deserializer=raft__pb2.AppendLogRequest.FromString,
          response_serializer=raft__pb2.AppendLogReply.SerializeToString,
      ),
      'RequestLog': grpc.unary_unary_rpc_method_handler(
          servicer.RequestLog,
          request_deserializer=raft__pb2.RequestLogRequest.FromString,
          response_serializer=raft__pb2.RequestLogReply.SerializeToString,
      ),
      'Shutdown': grpc.unary_unary_rpc_method_handler(
          servicer.Shutdown,
          request_deserializer=raft__pb2.Void.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
      'Alive': grpc.unary_unary_rpc_method_handler(
          servicer.Alive,
          request_deserializer=raft__pb2.Void.FromString,
          response_serializer=raft__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Control', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
