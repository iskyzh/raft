// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
class AppendEntriesReply;
class AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendLogReply;
class AppendLogReplyDefaultTypeInternal;
extern AppendLogReplyDefaultTypeInternal _AppendLogReply_default_instance_;
class AppendLogRequest;
class AppendLogRequestDefaultTypeInternal;
extern AppendLogRequestDefaultTypeInternal _AppendLogRequest_default_instance_;
class RequestLogReply;
class RequestLogReplyDefaultTypeInternal;
extern RequestLogReplyDefaultTypeInternal _RequestLogReply_default_instance_;
class RequestLogRequest;
class RequestLogRequestDefaultTypeInternal;
extern RequestLogRequestDefaultTypeInternal _RequestLogRequest_default_instance_;
class RequestVoteReply;
class RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class Void;
class VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AppendEntriesReply* Arena::CreateMaybeMessage<::AppendEntriesReply>(Arena*);
template<> ::AppendEntriesRequest* Arena::CreateMaybeMessage<::AppendEntriesRequest>(Arena*);
template<> ::AppendLogReply* Arena::CreateMaybeMessage<::AppendLogReply>(Arena*);
template<> ::AppendLogRequest* Arena::CreateMaybeMessage<::AppendLogRequest>(Arena*);
template<> ::RequestLogReply* Arena::CreateMaybeMessage<::RequestLogReply>(Arena*);
template<> ::RequestLogRequest* Arena::CreateMaybeMessage<::RequestLogRequest>(Arena*);
template<> ::RequestVoteReply* Arena::CreateMaybeMessage<::RequestVoteReply>(Arena*);
template<> ::RequestVoteRequest* Arena::CreateMaybeMessage<::RequestVoteRequest>(Arena*);
template<> ::Void* Arena::CreateMaybeMessage<::Void>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Void :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Void) */ {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  inline Void& operator=(Void&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Void& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Void* other);
  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Void* New() const final {
    return CreateMaybeMessage<Void>(nullptr);
  }

  Void* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Void* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Void";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Void)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoteRequest) */ {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestVoteRequest* other);
  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateId = 2;
  void clear_candidateid();
  static const int kCandidateIdFieldNumber = 2;
  const std::string& candidateid() const;
  void set_candidateid(const std::string& value);
  void set_candidateid(std::string&& value);
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  std::string* mutable_candidateid();
  std::string* release_candidateid();
  void set_allocated_candidateid(std::string* candidateid);

  // uint32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:RequestVoteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidateid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoteReply) */ {
 public:
  RequestVoteReply();
  virtual ~RequestVoteReply();

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RequestVoteReply* other);
  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReply* New() const final {
    return CreateMaybeMessage<RequestVoteReply>(nullptr);
  }

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteReply& from);
  void MergeFrom(const RequestVoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoteReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);

  // uint32 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 voteGranted = 3;
  void clear_votegranted();
  static const int kVoteGrantedFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 votegranted() const;
  void set_votegranted(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:RequestVoteReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AppendEntriesRequest* other);
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendEntriesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string leaderId = 2;
  void clear_leaderid();
  static const int kLeaderIdFieldNumber = 2;
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);

  // bytes entries = 6;
  void clear_entries();
  static const int kEntriesFieldNumber = 6;
  const std::string& entries() const;
  void set_entries(const std::string& value);
  void set_entries(std::string&& value);
  void set_entries(const char* value);
  void set_entries(const void* value, size_t size);
  std::string* mutable_entries();
  std::string* release_entries();
  void set_allocated_entries(std::string* entries);

  // uint32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 entries_term = 5;
  void clear_entries_term();
  static const int kEntriesTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 entries_term() const;
  void set_entries_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 leaderCommit = 7;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 leadercommit() const;
  void set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:AppendEntriesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entries_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendEntriesReply) */ {
 public:
  AppendEntriesReply();
  virtual ~AppendEntriesReply();

  AppendEntriesReply(const AppendEntriesReply& from);
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AppendEntriesReply* other);
  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesReply* New() const final {
    return CreateMaybeMessage<AppendEntriesReply>(nullptr);
  }

  AppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesReply& from);
  void MergeFrom(const AppendEntriesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendEntriesReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);

  // uint32 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 success = 3;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 success() const;
  void set_success(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lastAgreedIndex = 4;
  void clear_lastagreedindex();
  static const int kLastAgreedIndexFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastagreedindex() const;
  void set_lastagreedindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:AppendEntriesReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastagreedindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendLogRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendLogRequest) */ {
 public:
  AppendLogRequest();
  virtual ~AppendLogRequest();

  AppendLogRequest(const AppendLogRequest& from);
  AppendLogRequest(AppendLogRequest&& from) noexcept
    : AppendLogRequest() {
    *this = ::std::move(from);
  }

  inline AppendLogRequest& operator=(const AppendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendLogRequest& operator=(AppendLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendLogRequest* internal_default_instance() {
    return reinterpret_cast<const AppendLogRequest*>(
               &_AppendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AppendLogRequest* other);
  friend void swap(AppendLogRequest& a, AppendLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendLogRequest* New() const final {
    return CreateMaybeMessage<AppendLogRequest>(nullptr);
  }

  AppendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendLogRequest& from);
  void MergeFrom(const AppendLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendLogRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string log = 1;
  void clear_log();
  static const int kLogFieldNumber = 1;
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);

  // @@protoc_insertion_point(class_scope:AppendLogRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendLogReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendLogReply) */ {
 public:
  AppendLogReply();
  virtual ~AppendLogReply();

  AppendLogReply(const AppendLogReply& from);
  AppendLogReply(AppendLogReply&& from) noexcept
    : AppendLogReply() {
    *this = ::std::move(from);
  }

  inline AppendLogReply& operator=(const AppendLogReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendLogReply& operator=(AppendLogReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendLogReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendLogReply* internal_default_instance() {
    return reinterpret_cast<const AppendLogReply*>(
               &_AppendLogReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AppendLogReply* other);
  friend void swap(AppendLogReply& a, AppendLogReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendLogReply* New() const final {
    return CreateMaybeMessage<AppendLogReply>(nullptr);
  }

  AppendLogReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendLogReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendLogReply& from);
  void MergeFrom(const AppendLogReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendLogReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendLogReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AppendLogReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestLogRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestLogRequest) */ {
 public:
  RequestLogRequest();
  virtual ~RequestLogRequest();

  RequestLogRequest(const RequestLogRequest& from);
  RequestLogRequest(RequestLogRequest&& from) noexcept
    : RequestLogRequest() {
    *this = ::std::move(from);
  }

  inline RequestLogRequest& operator=(const RequestLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLogRequest& operator=(RequestLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestLogRequest* internal_default_instance() {
    return reinterpret_cast<const RequestLogRequest*>(
               &_RequestLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RequestLogRequest* other);
  friend void swap(RequestLogRequest& a, RequestLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestLogRequest* New() const final {
    return CreateMaybeMessage<RequestLogRequest>(nullptr);
  }

  RequestLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestLogRequest& from);
  void MergeFrom(const RequestLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestLogRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RequestLogRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestLogReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestLogReply) */ {
 public:
  RequestLogReply();
  virtual ~RequestLogReply();

  RequestLogReply(const RequestLogReply& from);
  RequestLogReply(RequestLogReply&& from) noexcept
    : RequestLogReply() {
    *this = ::std::move(from);
  }

  inline RequestLogReply& operator=(const RequestLogReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLogReply& operator=(RequestLogReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestLogReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestLogReply* internal_default_instance() {
    return reinterpret_cast<const RequestLogReply*>(
               &_RequestLogReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RequestLogReply* other);
  friend void swap(RequestLogReply& a, RequestLogReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestLogReply* New() const final {
    return CreateMaybeMessage<RequestLogReply>(nullptr);
  }

  RequestLogReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestLogReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestLogReply& from);
  void MergeFrom(const RequestLogReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLogReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestLogReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string logs = 2;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 2;
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();

  // string role = 1;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);

  // @@protoc_insertion_point(class_scope:RequestLogReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Void

// -------------------------------------------------------------------

// RequestVoteRequest

// uint32 term = 1;
inline void RequestVoteRequest::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteRequest.term)
  return term_;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRequest.term)
}

// string candidateId = 2;
inline void RequestVoteRequest::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:RequestVoteRequest.candidateId)
  return candidateid_.GetNoArena();
}
inline void RequestVoteRequest::set_candidateid(const std::string& value) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestVoteRequest.candidateId)
}
inline void RequestVoteRequest::set_candidateid(std::string&& value) {
  
  candidateid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestVoteRequest.candidateId)
}
inline void RequestVoteRequest::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestVoteRequest.candidateId)
}
inline void RequestVoteRequest::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestVoteRequest.candidateId)
}
inline std::string* RequestVoteRequest::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:RequestVoteRequest.candidateId)
  return candidateid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteRequest::release_candidateid() {
  // @@protoc_insertion_point(field_release:RequestVoteRequest.candidateId)
  
  return candidateid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_candidateid(std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:RequestVoteRequest.candidateId)
}

// uint32 lastLogIndex = 3;
inline void RequestVoteRequest::clear_lastlogindex() {
  lastlogindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:RequestVoteRequest.lastLogIndex)
  return lastlogindex_;
}
inline void RequestVoteRequest::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRequest.lastLogIndex)
}

// uint32 lastLogTerm = 4;
inline void RequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:RequestVoteRequest.lastLogTerm)
  return lastlogterm_;
}
inline void RequestVoteRequest::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRequest.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteReply

// string from = 1;
inline void RequestVoteReply::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestVoteReply::from() const {
  // @@protoc_insertion_point(field_get:RequestVoteReply.from)
  return from_.GetNoArena();
}
inline void RequestVoteReply::set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestVoteReply.from)
}
inline void RequestVoteReply::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestVoteReply.from)
}
inline void RequestVoteReply::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestVoteReply.from)
}
inline void RequestVoteReply::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestVoteReply.from)
}
inline std::string* RequestVoteReply::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:RequestVoteReply.from)
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteReply::release_from() {
  // @@protoc_insertion_point(field_release:RequestVoteReply.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteReply::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:RequestVoteReply.from)
}

// uint32 term = 2;
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteReply.term)
  return term_;
}
inline void RequestVoteReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteReply.term)
}

// uint32 voteGranted = 3;
inline void RequestVoteReply::clear_votegranted() {
  votegranted_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:RequestVoteReply.voteGranted)
  return votegranted_;
}
inline void RequestVoteReply::set_votegranted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  votegranted_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteReply.voteGranted)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// uint32 term = 1;
inline void AppendEntriesRequest::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.term)
  return term_;
}
inline void AppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.term)
}

// string leaderId = 2;
inline void AppendEntriesRequest::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.leaderId)
  return leaderid_.GetNoArena();
}
inline void AppendEntriesRequest::set_leaderid(const std::string& value) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.leaderId)
}
inline void AppendEntriesRequest::set_leaderid(std::string&& value) {
  
  leaderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesRequest.leaderId)
}
inline void AppendEntriesRequest::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesRequest.leaderId)
}
inline void AppendEntriesRequest::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesRequest.leaderId)
}
inline std::string* AppendEntriesRequest::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesRequest.leaderId)
  return leaderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesRequest::release_leaderid() {
  // @@protoc_insertion_point(field_release:AppendEntriesRequest.leaderId)
  
  return leaderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesRequest.leaderId)
}

// uint32 prevLogIndex = 3;
inline void AppendEntriesRequest::clear_prevlogindex() {
  prevlogindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.prevLogIndex)
  return prevlogindex_;
}
inline void AppendEntriesRequest::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.prevLogIndex)
}

// uint32 prevLogTerm = 4;
inline void AppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.prevLogTerm)
  return prevlogterm_;
}
inline void AppendEntriesRequest::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.prevLogTerm)
}

// uint32 entries_term = 5;
inline void AppendEntriesRequest::clear_entries_term() {
  entries_term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesRequest::entries_term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.entries_term)
  return entries_term_;
}
inline void AppendEntriesRequest::set_entries_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entries_term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.entries_term)
}

// bytes entries = 6;
inline void AppendEntriesRequest::clear_entries() {
  entries_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.entries)
  return entries_.GetNoArena();
}
inline void AppendEntriesRequest::set_entries(const std::string& value) {
  
  entries_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(std::string&& value) {
  
  entries_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entries_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(const void* value, size_t size) {
  
  entries_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesRequest.entries)
}
inline std::string* AppendEntriesRequest::mutable_entries() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesRequest.entries)
  return entries_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesRequest::release_entries() {
  // @@protoc_insertion_point(field_release:AppendEntriesRequest.entries)
  
  return entries_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_entries(std::string* entries) {
  if (entries != nullptr) {
    
  } else {
    
  }
  entries_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entries);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesRequest.entries)
}

// uint32 leaderCommit = 7;
inline void AppendEntriesRequest::clear_leadercommit() {
  leadercommit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesRequest::leadercommit() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRequest.leaderCommit)
  return leadercommit_;
}
inline void AppendEntriesRequest::set_leadercommit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRequest.leaderCommit)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// string from = 1;
inline void AppendEntriesReply::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendEntriesReply::from() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.from)
  return from_.GetNoArena();
}
inline void AppendEntriesReply::set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesReply.from)
}
inline void AppendEntriesReply::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesReply.from)
}
inline void AppendEntriesReply::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesReply.from)
}
inline void AppendEntriesReply::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesReply.from)
}
inline std::string* AppendEntriesReply::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesReply.from)
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesReply::release_from() {
  // @@protoc_insertion_point(field_release:AppendEntriesReply.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesReply::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesReply.from)
}

// uint32 term = 2;
inline void AppendEntriesReply::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.term)
  return term_;
}
inline void AppendEntriesReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesReply.term)
}

// uint32 success = 3;
inline void AppendEntriesReply::clear_success() {
  success_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.success)
  return success_;
}
inline void AppendEntriesReply::set_success(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesReply.success)
}

// uint32 lastAgreedIndex = 4;
inline void AppendEntriesReply::clear_lastagreedindex() {
  lastagreedindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::lastagreedindex() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.lastAgreedIndex)
  return lastagreedindex_;
}
inline void AppendEntriesReply::set_lastagreedindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lastagreedindex_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesReply.lastAgreedIndex)
}

// -------------------------------------------------------------------

// AppendLogRequest

// string log = 1;
inline void AppendLogRequest::clear_log() {
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendLogRequest::log() const {
  // @@protoc_insertion_point(field_get:AppendLogRequest.log)
  return log_.GetNoArena();
}
inline void AppendLogRequest::set_log(const std::string& value) {
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendLogRequest.log)
}
inline void AppendLogRequest::set_log(std::string&& value) {
  
  log_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendLogRequest.log)
}
inline void AppendLogRequest::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendLogRequest.log)
}
inline void AppendLogRequest::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendLogRequest.log)
}
inline std::string* AppendLogRequest::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:AppendLogRequest.log)
  return log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendLogRequest::release_log() {
  // @@protoc_insertion_point(field_release:AppendLogRequest.log)
  
  return log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendLogRequest::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:AppendLogRequest.log)
}

// -------------------------------------------------------------------

// AppendLogReply

// -------------------------------------------------------------------

// RequestLogRequest

// -------------------------------------------------------------------

// RequestLogReply

// string role = 1;
inline void RequestLogReply::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestLogReply::role() const {
  // @@protoc_insertion_point(field_get:RequestLogReply.role)
  return role_.GetNoArena();
}
inline void RequestLogReply::set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestLogReply.role)
}
inline void RequestLogReply::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestLogReply.role)
}
inline void RequestLogReply::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestLogReply.role)
}
inline void RequestLogReply::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestLogReply.role)
}
inline std::string* RequestLogReply::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:RequestLogReply.role)
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestLogReply::release_role() {
  // @@protoc_insertion_point(field_release:RequestLogReply.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLogReply::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:RequestLogReply.role)
}

// repeated string logs = 2;
inline int RequestLogReply::logs_size() const {
  return logs_.size();
}
inline void RequestLogReply::clear_logs() {
  logs_.Clear();
}
inline const std::string& RequestLogReply::logs(int index) const {
  // @@protoc_insertion_point(field_get:RequestLogReply.logs)
  return logs_.Get(index);
}
inline std::string* RequestLogReply::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:RequestLogReply.logs)
  return logs_.Mutable(index);
}
inline void RequestLogReply::set_logs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RequestLogReply.logs)
  logs_.Mutable(index)->assign(value);
}
inline void RequestLogReply::set_logs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RequestLogReply.logs)
  logs_.Mutable(index)->assign(std::move(value));
}
inline void RequestLogReply::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RequestLogReply.logs)
}
inline void RequestLogReply::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RequestLogReply.logs)
}
inline std::string* RequestLogReply::add_logs() {
  // @@protoc_insertion_point(field_add_mutable:RequestLogReply.logs)
  return logs_.Add();
}
inline void RequestLogReply::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RequestLogReply.logs)
}
inline void RequestLogReply::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RequestLogReply.logs)
}
inline void RequestLogReply::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RequestLogReply.logs)
}
inline void RequestLogReply::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RequestLogReply.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestLogReply::logs() const {
  // @@protoc_insertion_point(field_list:RequestLogReply.logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestLogReply::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:RequestLogReply.logs)
  return &logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
